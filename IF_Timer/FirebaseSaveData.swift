import FirebaseFirestore

class FirebaseSaveData {
    
    static let shared = FirebaseSaveData()
    private let db = Firestore.firestore()
    let selectPlanView = SelectPlanView()
    let fastingTracker = FastingTracker()

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func getUserDocument() -> DocumentReference {
        let userID = "lZpudjonPmsWukuoA2k9" // –≠—Ç–æ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return db.collection("myProfileIFTimer").document(userID)
    }

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    func saveDataToCloud(from viewController: ViewController) {
        let userData: [String: Any] = [
            "startDate": viewController.startDate.timeIntervalSince1970,
            "selectedMyPlan": viewController.selectedPlan.rawValue,
            "timeResting": viewController.timeResting,
            "timeFasting": viewController.timeFasting,
            "isStarvation": viewController.isStarvation,
            "timeWait": viewController.timeWait,
            "endDate": viewController.endDate.timeIntervalSince1970,
            "isFastingTimeExpired": viewController.isFastingTimeExpired,
            "isStarvationTimeExpired": viewController.isStarvationTimeExpired,
            "timeIsUp": viewController.timeIsUp,
            "vcSelectedButtonTag": viewController.vcSelectedButtonTag
        ]

        getUserDocument().setData(userData, merge: true) { error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase: \(error.localizedDescription)")
            } else {
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase!")
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase! - saveDataToCloud userData - \(userData)")
               
            }
        }
    
    }

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    func loadDataFromCloud(into viewController: ViewController) {
        getUserDocument().getDocument { snapshot, error in
            
            print("üìå Snapshot Firebase: \(snapshot)")
            print("üìå Error Firebase: \(error)")
            
            guard let data = snapshot?.data(), error == nil else {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Firebase: \(error?.localizedDescription ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                return
            }
            print("üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firebase")
            print("data Firebase - \(data)")

            DispatchQueue.main.async {
                viewController.startDate = Date(timeIntervalSince1970: data["startDate"] as? TimeInterval ?? Date().timeIntervalSince1970)
                viewController.selectedPlan = ViewController.Plan(rawValue: data["selectedMyPlan"] as? String ?? "default") ?? .basic
                viewController.timeResting = data["timeResting"] as? Int ?? 0
                viewController.timeFasting = data["timeFasting"] as? Int ?? 0
                viewController.isStarvation = data["isStarvation"] as? Bool ?? false
                viewController.timeWait = data["timeWait"] as? Int ?? 0
                viewController.endDate = Date(timeIntervalSince1970: data["endDate"] as? TimeInterval ?? Date().timeIntervalSince1970)
                //viewController.isFirstStartApp = data["isFirstStartApp"] as? Bool ?? false
                viewController.isFastingTimeExpired = data["isFastingTimeExpired"] as? Bool ?? false
                viewController.isStarvationTimeExpired = data["isStarvationTimeExpired"] as? Bool ?? false
                viewController.timeIsUp = data["timeIsUp"] as? Bool ?? false
                viewController.vcSelectedButtonTag = data["vcSelectedButtonTag"] as? Int ?? 2

                viewController.updateUI()
                
            }
        }
    }
    
    // MARK: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase data FastingTraker
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ–¥–∞–Ω–∏–∏ –≤ Firebase
    func saveFastingDataToCloud(fastingData: [FastingDataEntry]) {
        let userData: [String: Any] = [
            "fastingData": fastingData.map { entry in
                [
                    "date": entry.date,
                    "hours": entry.hours,
                    "fullDate": entry.fullDate
                ]
            }
        ]

        getUserDocument().setData(userData, merge: true) { error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FastingTracker –≤ Firebase: \(error.localizedDescription)")
            } else {
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–æ–¥–∞–Ω–∏–∏ –¥–ª—è FastingTracker —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase!")
                print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ userData ( FastingTracker ) –≤ Firebase: \(userData)")
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ–¥–∞–Ω–∏–∏ –∏–∑ Firebase
    func loadFastingDataFromCloud(into fastingTracker: FastingTracker) {
        getUserDocument().getDocument { snapshot, error in
            print("üìå Snapshot Firebase: \(snapshot)")  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ FastingTracker
            print("üìå Error Firebase: \(error)")  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ FastingTracker
            
            guard let data = snapshot?.data(), error == nil else {
                print(" ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase –¥–ª—è FastingTracker: \(error?.localizedDescription ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                return
            }

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —ç—Ç–æ –≤ –ª–æ–≥–∏
            if data["fastingData"] == nil {
                print(" ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è fastingData –≤ Firebase")
            }

            if let fastingDataArray = data["fastingData"] as? [[String: Any]] {
                print("Firebase üì• –î–∞–Ω–Ω—ã–µ fastingData: \(fastingDataArray)")  // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ

                var fastingDataEntries: [FastingDataEntry] = []
                for fastingDataDict in fastingDataArray {
                    if let date = fastingDataDict["date"] as? String,
                       let hours = fastingDataDict["hours"] as? CGFloat,
                       let fullDate = fastingDataDict["fullDate"] as? String {
                        let entry = FastingDataEntry(date: date, hours: hours, fullDate: fullDate)
                        fastingDataEntries.append(entry)
                    }
                }
                fastingTracker.fastingData = fastingDataEntries
                print(" ‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–æ–¥–∞–Ω–∏–∏ –¥–ª—è FastingTracker —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firebase!")
                print(" –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Firebase (FastingTracker): \(fastingDataEntries)")
            } else {
                print(" ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ fastingData –∏–∑ Firebase")
            }
        }
    }


}
