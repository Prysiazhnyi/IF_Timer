import FirebaseFirestore

class FirebaseSaveData {
    
    static let shared = FirebaseSaveData()
    private let db = Firestore.firestore()
    let selectPlanView = SelectPlanView()

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func getUserDocument() -> DocumentReference {
        let userID = "lZpudjonPmsWukuoA2k9" // ‚ùóÔ∏è–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return db.collection("users").document(userID)
    }

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    func saveDataToCloud(from viewController: ViewController) {
        let userData: [String: Any] = [
            "startDate": viewController.startDate.timeIntervalSince1970,
            "selectedMyPlan": viewController.selectedPlan.rawValue,
            "timeResting": viewController.timeResting,
            "timeFasting": viewController.timeFasting,
            "isStarvation": viewController.isStarvation,
            "timeWait": viewController.timeWait,
            "endDate": viewController.endDate.timeIntervalSince1970,
            //"isFirstStartApp": viewController.isFirstStartApp,
            "isFastingTimeExpired": viewController.isFastingTimeExpired,
            "isStarvationTimeExpired": viewController.isStarvationTimeExpired,
            "timeIsUp": viewController.timeIsUp,
            "vcSelectedButtonTag": viewController.vcSelectedButtonTag
        ]

        print(" userData - \(userData)")
        
        getUserDocument().setData(userData) { error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: \(error.localizedDescription)")
            } else {
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase!")
            }
        }
    }

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    func loadDataFromCloud(into viewController: ViewController) {
        getUserDocument().getDocument { snapshot, error in
            
            print("üìå Snapshot: \(snapshot)")
            print("üìå Error: \(error)")
            
            guard let data = snapshot?.data(), error == nil else {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error?.localizedDescription ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                return
            }
            print("üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firebase")
            print("data - \(data)")

            DispatchQueue.main.async {
                viewController.startDate = Date(timeIntervalSince1970: data["startDate"] as? TimeInterval ?? Date().timeIntervalSince1970)
                viewController.selectedPlan = ViewController.Plan(rawValue: data["selectedMyPlan"] as? String ?? "default") ?? .basic
                viewController.timeResting = data["timeResting"] as? Int ?? 0
                viewController.timeFasting = data["timeFasting"] as? Int ?? 0
                viewController.isStarvation = data["isStarvation"] as? Bool ?? false
                viewController.timeWait = data["timeWait"] as? Int ?? 0
                viewController.endDate = Date(timeIntervalSince1970: data["endDate"] as? TimeInterval ?? Date().timeIntervalSince1970)
                //viewController.isFirstStartApp = data["isFirstStartApp"] as? Bool ?? false
                viewController.isFastingTimeExpired = data["isFastingTimeExpired"] as? Bool ?? false
                viewController.isStarvationTimeExpired = data["isStarvationTimeExpired"] as? Bool ?? false
                viewController.timeIsUp = data["timeIsUp"] as? Bool ?? false
                viewController.vcSelectedButtonTag = data["vcSelectedButtonTag"] as? Int ?? 2

                viewController.updateUI()
            }
        }
    }
}
